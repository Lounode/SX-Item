plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
// 全局设置
allprojects {
    apply plugin: 'java'

    group 'github.saukiya'
    version '3.2.6'

    repositories {
        mavenCentral()
        //Github Project
        maven { url 'https://jitpack.io' }
        //MythicMobs
        maven { url "https://mvn.lumine.io/repository/maven-public/" }
        //bStats-bukkit
        maven { url 'https://repo.codemc.org/repository/maven-public' }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
        testImplementation 'org.projectlombok:lombok:1.18.30'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none'
        options.compilerArgs << '-nowarn'
    }
    tasks.withType(JavaExec) {
        jvmArgs = ['-Dfile.encoding=UTF-8', '-Dsun.stdout.encoding=UTF-8', '-Dsun.stderr.encoding=UTF-8']
    }
}

// 子项目设置
subprojects {
    dependencies {
        compileOnly fileTree('lib')
        compileOnly getRootProject()
    }
}

dependencies {
    compileOnly fileTree("Module-NMS-V1_20_R1/lib")
    implementation 'org.bstats:bstats-bukkit:2.2.1'
    compileOnly 'org.openjdk.nashorn:nashorn-core:15.4'
    compileOnly 'io.lumine.xikage:MythicMobs:4.12.0'
    compileOnly 'io.lumine:Mythic-Dist:5.2.1'
    compileOnly 'com.github.PlaceholderAPI:PlaceholderAPI:2.10.9'

    testImplementation fileTree("Module-NMS-V1_20_R1/lib")
    testImplementation 'com.google.guava:guava:31.0.1-jre'
}

shadowJar {
    // 过滤未使用的依赖
    minimize()
    // bStats重定向
    relocate('org.bstats', 'github.saukiya.sxitem.bstats')
    //执行所有子项目的 classes task
    dependsOn getSubprojects().stream().map(sub -> sub.getPath() + ':classes').toList()
    // 获得子模块的classes文件
    getSubprojects().forEach(sub -> {
        from(sub.getBuildDir().toString() + '/classes/java/main')
    })
}

//构建并拷贝
task buildLastJar(type: Copy) {
    dependsOn shadowJar
    from shadowJar.archiveFile.get().asFile.path
    into("$rootDir").rename { "${project.name}-Latest.jar" }

}


//需要对资源文件中含有的'$'进行转义: $ -> \$
processResources {
    expand(version: version)
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}